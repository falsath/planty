<%- include('../userLayouts/userhead.ejs') %>

  <style>
    .lh-condensed {
      line-height: 1.25;
    }

    .checkout-box {
      background-color: #f1e7e7;
      padding: 20px;
      border-radius: 10px;
      margin-top: 20px;
    }

    .background {
      background-color: #adadad;
      padding: 20px;
      border-radius: 10px;
      margin-top: 20px;
    }
  </style>

  <div class="mt-5 ms-5">
    <a href="/cart" class="btn btn-dark">BACK</a>
  </div>


  <div class="container">
    <div class="checkout-box">

<!-- ....................................... -->

<% if (typeof cartUpdateMessage !== 'undefined') { %>
  <div class="alert alert-warning" role="alert">
    <%= cartUpdateMessage %>
  </div>
  <% delete req.session.cartUpdateMessage; %>
<% } %>



<!-- ............................................... -->
      <div class="py-5 text-center">
        <h2 style="font-weight: bold;">CHECKOUT</h2>
        <!-- <p class="lead">Below is an example form built entirely with Bootstrapâ€™s form controls. Each required form group has a validation state that can be triggered by attempting to submit the form without completing it.</p> -->
      </div>
      <form class="needs-validation" novalidate="" onsubmit="placeOrder(event)">
        <div class="row">


          <div class="col-md-8 order-md-1">
            <h4 class="mb-3">Billing address</h4>
            <div class="row">
              <!-- <div class="form-outline mb-4">
                <label for="address">Select Address:</label>
                <select id="address" name="address.address" class="form-control">
                  <% if (user && user.addresses && user.addresses.length> 0) { %>
                    <% for (let i=0; i < user.addresses.length; i++) { %>
                      <option value="<%= user.addresses[i].address %>" data-name="<%= user.addresses[i].name %>"
                        data-address="<%= user.addresses[i].address %>" data-state="<%= user.addresses[i].state %>"
                        data-city="<%= user.addresses[i].city %>" data-pincode="<%= user.addresses[i].pincode %>"
                        data-email="<%= user.email %>">
                        <%= user.addresses[i].address %>
                          <%= user.addresses[i].state %>
                            <%= user.addresses[i].city %>
                              <%= user.addresses[i].pincode %>
                      </option>
                      <% } %>
                        <% } else { %>
                          <option value="" disabled>No addresses available</option>
                          <% } %>
                </select>
              </div> -->

              <div class="form-outline mb-4">
                <label for="address">Select Address:</label>
                <select id="address" name="address.address" class="form-control">
                  <% if (user && user.addresses && user.addresses.length > 0) { %>
                    <% for (let i = 0; i < user.addresses.length; i++) { %>
                      <option value="<%= user.addresses[i].address %>" 
                        data-name="<%= user.addresses[i].name %>"
                        data-address="<%= user.addresses[i].address %>"
                        data-state="<%= user.addresses[i].state %>"
                        data-city="<%= user.addresses[i].city %>"
                        data-pincode="<%= user.addresses[i].pincode %>"
                        data-email="<%= user.email %>">
                        <%= user.addresses[i].address %>, <%= user.addresses[i].city %>, <%= user.addresses[i].state %>, <%= user.addresses[i].pincode %>
                      </option>
                    <% } %>
                  <% } else { %>
                    <option value="" disabled>No addresses available</option>
                  <% } %>
                </select>
              </div>
              


            </div>
            <div class="row">
              <% if (user && user.addresses) { %>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example1n">Full name</label>
                  <input type="text" id="form3Example1n" class="form-control form-control-lg" name="name" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example8">Address</label>
                  <input type="text" id="form3Example8" class="form-control form-control-lg" name="address" required />
                  <!-- Hidden inputs for product details -->
                  <% for (let i=0; i < cartData.products.length; i++) { %>
                    <input type="hidden" name="productId" value="<%= cartData.products[i].product._id %>">
                    <input type="hidden" name="proName" value="<%= cartData.products[i].product.name %>">
                    <input type="hidden" name="quantity" value="<%= cartData.products[i].quantity %>">
                    <input type="hidden" name="price" value="<%= cartData.products[i].product.price %>">
                    <% } %>
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example8">State</label>
                  <input type="text" id="form3Example8" class="form-control form-control-lg" name="state" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example9">City</label>
                  <input type="text" id="form3Example9" class="form-control form-control-lg" name="city" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example3">Pincode</label>
                  <input type="text" id="form3Example3" class="form-control form-control-lg" name="pincode" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example2">Email</label>
                  <input type="text" id="form3Example2" class="form-control form-control-lg" name="email" required />
                </div>
                <% } else { %>
                  <p>User data not available</p>
                  <% } %>
            </div>
          </div>

          <div class="col-md-4 order-md-2 mb-4 background">

            <h4 class="d-flex justify-content-between align-items-center mb-3">
              <span class="">Your cart</span>
            </h4>

            <ul class="list-group mb-3">
              <% if (cartData && cartData.products && cartData.products.length> 0) { %>
                <% for (let i=0; i < cartData.products.length; i++) { %>
                  <li class="list-group-item d-flex justify-content-between lh-condensed">
                    <div>
                      <% if (cartData.products[i].product.image && cartData.products[i].product.image.length> 0) { %>
                        <!-- Display the first product image -->
                        <img src="/public/productImage/<%= cartData.products[i].product.image[0] %>" class="img-sm"
                          style="height: 50px;width: 50px;">
                        <% } %>
                          <h6 class="my-0">
                            <%= cartData.products[i].product.name %>
                          </h6>
                          <small class="text-muted">
                            <%= cartData.products[i].product.description %>
                          </small>
                    </div>
                    <span class="text-muted">Rs.<%= cartData.products[i].product.price %></span>
                  </li>
                  <% } %>
                    <% } else { %>
                      <li class="list-group-item d-flex justify-content-between">
                        <span>No products in the cart</span>
                      </li>
                      <% } %>
                        <li class="list-group-item d-flex justify-content-between">
                          <span>Total Price</span>
                          <strong id="totalPrice">Rs.<%= cartData.totalPrice %></strong>
                        </li>
            </ul>
            <div>
              <hr class="mb-4">
              <h4 class="mb-3 ">Payment</h4>
              <div class="d-block my-3">
                <div class="form-outline mb-4">
                  <select name="payment" id="payment" class="form-control">
                    <option value="" class="form-label">Choose Your Payment Method</option>
                    <option value="COD" class="form-label">COD</option>
                    <option value="WALLET" class="form-label">WALLET</option>
                    <option value="UPI" class="form-label">UPI</option>
                  </select>
                </div>
              </div>
              <hr class="mb-4">
              <button class="btn btn-primary btn-lg btn-block" type="submit" onclick="">Continue to checkout</button>

            </div>
          </div>
        </div>

      </form>
    </div>
  </div>



  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
    



document.addEventListener('DOMContentLoaded', function () {


  const paymentSelect = document.getElementById('payment');
  const totalPriceElement = document.getElementById('totalPrice'); // Assuming total price is displayed here
  //const totalPrice = parseFloat(totalPriceElement.textContent); // Get the total price value
  const totalPrice = parseFloat(totalPriceElement.textContent.replace('Rs.', '').trim()); // Remove "Rs." and parse the number

 
 
 
 
 
 
  // Check if total price exceeds Rs 1000
  if (totalPrice > 1000) {
    // Disable COD option
    const codOption = paymentSelect.querySelector('option[value="COD"]');
    if (codOption) {
      codOption.disabled = true;
    }

    // Show a message to inform the user
    const codMessage = document.createElement('p');
    codMessage.textContent = 'COD is not available for orders above Rs 1000.';
    codMessage.style.color = 'red';
    paymentSelect.parentNode.insertBefore(codMessage, paymentSelect.nextSibling);
  }



  var form = document.querySelector('.needs-validation');
  var addressSelect = document.getElementById('address');
  var fullNameInput = document.getElementById('form3Example1n');
  var submitButton = document.querySelector('button[type="submit"]');

  // Disable the button initially if no address is selected
  if (!addressSelect.value) {
    submitButton.disabled = true;
  }

  addressSelect.addEventListener('change', function () {
    if (addressSelect.value !== "") {
      var selectedAddress = addressSelect.options[addressSelect.selectedIndex];

      fullNameInput.value = selectedAddress.dataset.name;
      document.getElementById('form3Example8').value = selectedAddress.dataset.address;
      document.querySelector('[name="state"]').value = selectedAddress.dataset.state;
      document.querySelector('[name="city"]').value = selectedAddress.dataset.city;
      document.getElementById('form3Example3').value = selectedAddress.dataset.pincode;
      document.getElementById('form3Example2').value = selectedAddress.dataset.email;

      // Manually trigger change event after auto-filling the inputs
      fullNameInput.dispatchEvent(new Event('change'));
      document.getElementById('form3Example8').dispatchEvent(new Event('change'));
      document.querySelector('[name="state"]').dispatchEvent(new Event('change'));
      document.querySelector('[name="city"]').dispatchEvent(new Event('change'));
      document.getElementById('form3Example3').dispatchEvent(new Event('change'));
      document.getElementById('form3Example2').dispatchEvent(new Event('change'));

      // Enable submit button when a valid address is selected
      submitButton.disabled = false;

    } else {
      // Clear fields if no address is selected
      fullNameInput.value = '';
      document.getElementById('form3Example8').value = '';
      document.querySelector('[name="state"]').value = '';
      document.querySelector('[name="city"]').value = '';
      document.getElementById('form3Example3').value = '';
      document.getElementById('form3Example2').value = '';

      submitButton.disabled = true;
    }
  });
});





    async function placeOrder(event) {
      try {
        event.preventDefault();

        const form = event.target;
        const formData = new FormData(form);

        const formDataObject = {};
        formData.forEach((value, key) => {
          formDataObject[key] = value;
        });

        console.log(formDataObject);

        const response = await fetch('/place-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formDataObject),
        });

        console.log('Client Response:', response);

        if (!response.ok) {
          console.error('Fetch error:', response.status, response.statusText);

          if (response.status === 400) {
            handleNonJsonResponse(response);
          } else {
            handleNonJsonResponse('Unexpected error');
          }

          return;
        }

        if (response.redirected) {
          console.log('Redirect detected, navigating to:', response.url);
          window.location.href = response.url;
          return;
        }

        try {
          const result = await response.json();
          console.log('Parsed JSON Response:', result);

          if (result.errorMessages) {
            handleVerificationFailure(result.errorMessages);
            return;
          }

          if (result.response && result.response.method === 'UPI') {
            console.log('UPI payment detected');

            const orderDetails = {
              key: result.response.key_id,
              amount: result.response.amount,
              currency: 'INR',
              order_id: result.response.order.id,
              image: '',
              handler: async function (result) {
                const formDataClone = new FormData(form);
                console.log('formDataClone:', formDataClone);

                formDataClone.forEach((value, key) => {
                  console.log(`${key}: ${value}`);
                });

                const verifyResponse = await fetch('/verifyRazorPay', {
                  method: 'POST',
                  body: formDataClone,
                });

                if (verifyResponse.ok) {
                  const verifyResult = await verifyResponse.json();
                  window.location.href = '/order-placed';
                } else {
                  const verifyResult = await verifyResponse.json();
                  handleVerificationFailure(verifyResult.errorMessages);
                }
              },
            };

            console.log('Before Razorpay instantiation');
            const razorpay = new Razorpay(orderDetails);
            console.log('After Razorpay instantiation');

            razorpay.on('payment.failed', function (response) {
              alert(response.error.reason);
            });
            razorpay.open();
          } else {
            console.log('Fallback to order-placed');
            window.location.href = '/order-placed';
          }
        } catch (jsonError) {
          console.error('JSON parsing error:', jsonError);
          handleNonJsonResponse('Unexpected response from the server');
        }
      } catch (error) {
        console.error('Error:', error);
        handleNonJsonResponse('Unexpected error');
      }
    }

    function handleVerificationFailure(errorMessage) {
      const customAlertContainer = document.getElementById('customAlertContainer');
      const customAlertStrong = document.getElementById('customAlertStrong');

      if (customAlertContainer && customAlertStrong) {
        customAlertStrong.textContent = errorMessage;
        customAlertContainer.style.display = 'block';
        console.log('Failed to verify Razorpay payment');
      } else {
        console.error('Failed to set properties on null elements');
      }
    }

    function handleNonJsonResponse(response) {
      const customAlertContainer = document.getElementById('customAlertContainer');
      const customAlertStrong = document.getElementById('customAlertStrong');

      if (customAlertContainer && customAlertStrong) {
        if (response.status === 400) {
          customAlertStrong.textContent = 'Insufficient balance. Choose another option.';
        } else {
          customAlertStrong.textContent = 'Unexpected error';
        }

        customAlertContainer.style.display = 'block';
        console.log('Failed to place order (non-JSON response)');
      } else {
        console.error('Failed to set properties on null elements');
      }
    }
  </script>

  

  <%- include('../userLayouts/userFoot.ejs') %>