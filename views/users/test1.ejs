checkout.ejs week11
...................................
<%- include('../userLayouts/userhead.ejs') %>

  <style>
    .lh-condensed {
      line-height: 1.25;
    }

    .checkout-box {
      background-color: #f1e7e7;
      padding: 20px;
      border-radius: 10px;
      margin-top: 20px;
    }

    .background {
      background-color: #adadad;
      padding: 20px;
      border-radius: 10px;
      margin-top: 20px;
    }
  </style>

  <div class="mt-5 ms-5">
    <a href="/cart" class="btn btn-dark">BACK</a>
  </div>


  <div class="container">
    <div class="checkout-box">
      <div class="py-5 text-center">
        <h2 style="font-weight: bold;">CHECKOUT</h2>
        <!-- <p class="lead">Below is an example form built entirely with Bootstrapâ€™s form controls. Each required form group has a validation state that can be triggered by attempting to submit the form without completing it.</p> -->
      </div>
      <form class="needs-validation" novalidate="" onsubmit="placeOrder(event)">
        <div class="row">


          <div class="col-md-8 order-md-1">
            <h4 class="mb-3">Billing address</h4>
            <div class="row">
              <!-- <div class="form-outline mb-4">
                <label for="address">Select Address:</label>
                <select id="address" name="address.address" class="form-control">
                  <% if (user && user.addresses && user.addresses.length> 0) { %>
                    <% for (let i=0; i < user.addresses.length; i++) { %>
                      <option value="<%= user.addresses[i].address %>" data-name="<%= user.addresses[i].name %>"
                        data-address="<%= user.addresses[i].address %>" data-state="<%= user.addresses[i].state %>"
                        data-city="<%= user.addresses[i].city %>" data-pincode="<%= user.addresses[i].pincode %>"
                        data-email="<%= user.email %>">
                        <%= user.addresses[i].address %>
                          <%= user.addresses[i].state %>
                            <%= user.addresses[i].city %>
                              <%= user.addresses[i].pincode %>
                      </option>
                      <% } %>
                        <% } else { %>
                          <option value="" disabled>No addresses available</option>
                          <% } %>
                </select>
              </div> -->

              <div class="form-outline mb-4">
                <label for="address">Select Address:</label>
                <select id="address" name="address.address" class="form-control">
                  <% if (user && user.addresses && user.addresses.length > 0) { %>
                    <% for (let i = 0; i < user.addresses.length; i++) { %>
                      <option value="<%= user.addresses[i].address %>" 
                        data-name="<%= user.addresses[i].name %>"
                        data-address="<%= user.addresses[i].address %>"
                        data-state="<%= user.addresses[i].state %>"
                        data-city="<%= user.addresses[i].city %>"
                        data-pincode="<%= user.addresses[i].pincode %>"
                        data-email="<%= user.email %>">
                        <%= user.addresses[i].address %>, <%= user.addresses[i].city %>, <%= user.addresses[i].state %>, <%= user.addresses[i].pincode %>
                      </option>
                    <% } %>
                  <% } else { %>
                    <option value="" disabled>No addresses available</option>
                  <% } %>
                </select>
              </div>
              


            </div>
            <div class="row">
              <% if (user && user.addresses) { %>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example1n">Full name</label>
                  <input type="text" id="form3Example1n" class="form-control form-control-lg" name="name" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example8">Address</label>
                  <input type="text" id="form3Example8" class="form-control form-control-lg" name="address" required />
                  <!-- Hidden inputs for product details -->
                  <% for (let i=0; i < cartData.products.length; i++) { %>
                    <input type="hidden" name="productId" value="<%= cartData.products[i].product._id %>">
                    <input type="hidden" name="proName" value="<%= cartData.products[i].product.name %>">
                    <input type="hidden" name="quantity" value="<%= cartData.products[i].quantity %>">
                    <input type="hidden" name="price" value="<%= cartData.products[i].product.price %>">
                    <% } %>
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example8">State</label>
                  <input type="text" id="form3Example8" class="form-control form-control-lg" name="state" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example9">City</label>
                  <input type="text" id="form3Example9" class="form-control form-control-lg" name="city" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example3">Pincode</label>
                  <input type="text" id="form3Example3" class="form-control form-control-lg" name="pincode" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example2">Email</label>
                  <input type="text" id="form3Example2" class="form-control form-control-lg" name="email" required />
                </div>
                <% } else { %>
                  <p>User data not available</p>
                  <% } %>
            </div>
          </div>

          <div class="col-md-4 order-md-2 mb-4 background">

            <h4 class="d-flex justify-content-between align-items-center mb-3">
              <span class="">Your cart</span>
            </h4>

            <ul class="list-group mb-3">
              <% if (cartData && cartData.products && cartData.products.length> 0) { %>
                <% for (let i=0; i < cartData.products.length; i++) { %>
                  <li class="list-group-item d-flex justify-content-between lh-condensed">
                    <div>
                      <% if (cartData.products[i].product.image && cartData.products[i].product.image.length> 0) { %>
                        <!-- Display the first product image -->
                        <img src="/public/productImage/<%= cartData.products[i].product.image[0] %>" class="img-sm"
                          style="height: 50px;width: 50px;">
                        <% } %>
                          <h6 class="my-0">
                            <%= cartData.products[i].product.name %>
                          </h6>
                          <small class="text-muted">
                            <%= cartData.products[i].product.description %>
                          </small>
                    </div>
                    <span class="text-muted">Rs.<%= cartData.products[i].product.price %></span>
                  </li>
                  <% } %>
                    <% } else { %>
                      <li class="list-group-item d-flex justify-content-between">
                        <span>No products in the cart</span>
                      </li>
                      <% } %>
                        <li class="list-group-item d-flex justify-content-between">
                          <span>Total Price</span>
                          <strong>Rs.<%= cartData.totalPrice %></strong>
                        </li>
            </ul>
            <div>
              <hr class="mb-4">
              <h4 class="mb-3 ">Payment</h4>
              <div class="d-block my-3">
                <div class="form-outline mb-4">
                  <select name="payment" id="payment" class="form-control">
                    <option value="" class="form-label">Choose Your Payment Method</option>
                    <option value="COD" class="form-label">COD</option>
                    <option value="WALLET" class="form-label">WALLET</option>
                    <option value="UPI" class="form-label">UPI</option>
                  </select>
                </div>
              </div>
              <hr class="mb-4">
              <button class="btn btn-primary btn-lg btn-block" type="submit" onclick="">Continue to checkout</button>

            </div>
          </div>
        </div>

      </form>
    </div>
  </div>



  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
    // document.addEventListener('DOMContentLoaded', function () {
    //   var form = document.querySelector('.needs-validation');
    //   console.log("Form Element:", form);
    //   var addressSelect = document.getElementById('address');
    //   var fullNameInput = document.getElementById('form3Example1n');

    //   addressSelect.addEventListener('change', function () {
    //     if (addressSelect.value !== "") {
    //       var selectedAddress = addressSelect.options[addressSelect.selectedIndex];

    //       fullNameInput.value = selectedAddress.dataset.name;
    //       document.getElementById('form3Example8').value = selectedAddress.dataset.address;
    //       document.querySelector('[name="state"]').value = selectedAddress.dataset.state;
    //       document.querySelector('[name="city"]').value = selectedAddress.dataset.city;
    //       document.getElementById('form3Example3').value = selectedAddress.dataset.pincode;
    //       document.getElementById('form3Example2').value = selectedAddress.dataset.email;
    //     } else {
    //       fullNameInput.value = '';
    //       document.getElementById('form3Example8').value = '';
    //       document.querySelector('[name="state"]').value = '';
    //       document.querySelector('[name="city"]').value = '';
    //       document.getElementById('form3Example3').value = '';
    //       document.getElementById('form3Example2').value = '';
    //     }
    //   });
    // });


//     document.addEventListener('DOMContentLoaded', function () {
//   var form = document.querySelector('.needs-validation');
//   var addressSelect = document.getElementById('address');
//   var fullNameInput = document.getElementById('form3Example1n');
//   var submitButton = document.querySelector('button[type="submit"]');

//   // Disable the button initially if no address is selected
//   if (!addressSelect.value) {
//     submitButton.disabled = true;
//   }

//   addressSelect.addEventListener('change', function () {
//     if (addressSelect.value !== "") {
//       var selectedAddress = addressSelect.options[addressSelect.selectedIndex];

//       fullNameInput.value = selectedAddress.dataset.name;
//       document.getElementById('form3Example8').value = selectedAddress.dataset.address;
//       document.querySelector('[name="state"]').value = selectedAddress.dataset.state;
//       document.querySelector('[name="city"]').value = selectedAddress.dataset.city;
//       document.getElementById('form3Example3').value = selectedAddress.dataset.pincode;
//       document.getElementById('form3Example2').value = selectedAddress.dataset.email;

//       // Enable submit button when a valid address is selected
//       submitButton.disabled = false;

//     } else {
//       fullNameInput.value = '';
//       document.getElementById('form3Example8').value = '';
//       document.querySelector('[name="state"]').value = '';
//       document.querySelector('[name="city"]').value = '';
//       document.getElementById('form3Example3').value = '';
//       document.getElementById('form3Example2').value = '';

//       // Disable the submit button if no address is selected
//       submitButton.disabled = true;
//     }
//   });
// });




document.addEventListener('DOMContentLoaded', function () {


  const paymentSelect = document.getElementById('payment');
  const totalPriceElement = document.getElementById('totalPrice'); // Assuming total price is displayed here
  const totalPrice = parseFloat(totalPriceElement.textContent); // Get the total price value

 
 
 
 
 
 
  // Check if total price exceeds Rs 1000
  if (totalPrice > 1000) {
    // Disable COD option
    const codOption = paymentSelect.querySelector('option[value="COD"]');
    if (codOption) {
      codOption.disabled = true;
    }

    // Show a message to inform the user
    const codMessage = document.createElement('p');
    codMessage.textContent = 'COD is not available for orders above Rs 1000.';
    codMessage.style.color = 'red';
    paymentSelect.parentNode.insertBefore(codMessage, paymentSelect.nextSibling);
  }



  var form = document.querySelector('.needs-validation');
  var addressSelect = document.getElementById('address');
  var fullNameInput = document.getElementById('form3Example1n');
  var submitButton = document.querySelector('button[type="submit"]');

  // Disable the button initially if no address is selected
  if (!addressSelect.value) {
    submitButton.disabled = true;
  }

  addressSelect.addEventListener('change', function () {
    if (addressSelect.value !== "") {
      var selectedAddress = addressSelect.options[addressSelect.selectedIndex];

      fullNameInput.value = selectedAddress.dataset.name;
      document.getElementById('form3Example8').value = selectedAddress.dataset.address;
      document.querySelector('[name="state"]').value = selectedAddress.dataset.state;
      document.querySelector('[name="city"]').value = selectedAddress.dataset.city;
      document.getElementById('form3Example3').value = selectedAddress.dataset.pincode;
      document.getElementById('form3Example2').value = selectedAddress.dataset.email;

      // Manually trigger change event after auto-filling the inputs
      fullNameInput.dispatchEvent(new Event('change'));
      document.getElementById('form3Example8').dispatchEvent(new Event('change'));
      document.querySelector('[name="state"]').dispatchEvent(new Event('change'));
      document.querySelector('[name="city"]').dispatchEvent(new Event('change'));
      document.getElementById('form3Example3').dispatchEvent(new Event('change'));
      document.getElementById('form3Example2').dispatchEvent(new Event('change'));

      // Enable submit button when a valid address is selected
      submitButton.disabled = false;

    } else {
      // Clear fields if no address is selected
      fullNameInput.value = '';
      document.getElementById('form3Example8').value = '';
      document.querySelector('[name="state"]').value = '';
      document.querySelector('[name="city"]').value = '';
      document.getElementById('form3Example3').value = '';
      document.getElementById('form3Example2').value = '';

      submitButton.disabled = true;
    }
  });
});





    async function placeOrder(event) {
      try {
        event.preventDefault();

        const form = event.target;
        const formData = new FormData(form);

        const formDataObject = {};
        formData.forEach((value, key) => {
          formDataObject[key] = value;
        });

        console.log(formDataObject);

        const response = await fetch('/place-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formDataObject),
        });

        console.log('Client Response:', response);

        if (!response.ok) {
          console.error('Fetch error:', response.status, response.statusText);

          if (response.status === 400) {
            handleNonJsonResponse(response);
          } else {
            handleNonJsonResponse('Unexpected error');
          }

          return;
        }

        if (response.redirected) {
          console.log('Redirect detected, navigating to:', response.url);
          window.location.href = response.url;
          return;
        }

        try {
          const result = await response.json();
          console.log('Parsed JSON Response:', result);

          if (result.errorMessages) {
            handleVerificationFailure(result.errorMessages);
            return;
          }

          if (result.response && result.response.method === 'UPI') {
            console.log('UPI payment detected');

            const orderDetails = {
              key: result.response.key_id,
              amount: result.response.amount,
              currency: 'INR',
              order_id: result.response.order.id,
              image: '',
              handler: async function (result) {
                const formDataClone = new FormData(form);
                console.log('formDataClone:', formDataClone);

                formDataClone.forEach((value, key) => {
                  console.log(`${key}: ${value}`);
                });

                const verifyResponse = await fetch('/verifyRazorPay', {
                  method: 'POST',
                  body: formDataClone,
                });

                if (verifyResponse.ok) {
                  const verifyResult = await verifyResponse.json();
                  window.location.href = '/order-placed';
                } else {
                  const verifyResult = await verifyResponse.json();
                  handleVerificationFailure(verifyResult.errorMessages);
                }
              },
            };

            console.log('Before Razorpay instantiation');
            const razorpay = new Razorpay(orderDetails);
            console.log('After Razorpay instantiation');

            razorpay.on('payment.failed', function (response) {
              alert(response.error.reason);
            });
            razorpay.open();
          } else {
            console.log('Fallback to order-placed');
            window.location.href = '/order-placed';
          }
        } catch (jsonError) {
          console.error('JSON parsing error:', jsonError);
          handleNonJsonResponse('Unexpected response from the server');
        }
      } catch (error) {
        console.error('Error:', error);
        handleNonJsonResponse('Unexpected error');
      }
    }

    function handleVerificationFailure(errorMessage) {
      const customAlertContainer = document.getElementById('customAlertContainer');
      const customAlertStrong = document.getElementById('customAlertStrong');

      if (customAlertContainer && customAlertStrong) {
        customAlertStrong.textContent = errorMessage;
        customAlertContainer.style.display = 'block';
        console.log('Failed to verify Razorpay payment');
      } else {
        console.error('Failed to set properties on null elements');
      }
    }

    function handleNonJsonResponse(response) {
      const customAlertContainer = document.getElementById('customAlertContainer');
      const customAlertStrong = document.getElementById('customAlertStrong');

      if (customAlertContainer && customAlertStrong) {
        if (response.status === 400) {
          customAlertStrong.textContent = 'Insufficient balance. Choose another option.';
        } else {
          customAlertStrong.textContent = 'Unexpected error';
        }

        customAlertContainer.style.display = 'block';
        console.log('Failed to place order (non-JSON response)');
      } else {
        console.error('Failed to set properties on null elements');
      }
    }
  </script>

  

  <%- include('../userLayouts/userFoot.ejs') %>

................................................................................................................


//checkout.ejs original


<%- include('../userLayouts/userhead.ejs') %>

  <style>
    .lh-condensed {
      line-height: 1.25;
    }

    .checkout-box {
      background-color: #f1e7e7;
      padding: 20px;
      border-radius: 10px;
      margin-top: 20px;
    }

    .background {
      background-color: #adadad;
      padding: 20px;
      border-radius: 10px;
      margin-top: 20px;
    }
  </style>

  <div class="mt-5 ms-5">
    <a href="/cart" class="btn btn-dark">BACK</a>
  </div>


  <div class="container">
    <div class="checkout-box">
      <div class="py-5 text-center">
        <h2 style="font-weight: bold;">CHECKOUT</h2>
        <!-- <p class="lead">Below is an example form built entirely with Bootstrapâ€™s form controls. Each required form group has a validation state that can be triggered by attempting to submit the form without completing it.</p> -->
      </div>
      <form class="needs-validation" novalidate="" onsubmit="placeOrder(event)">
        <div class="row">


          <div class="col-md-8 order-md-1">
            <h4 class="mb-3">Billing address</h4>
            <div class="row">
              
              <div class="form-outline mb-4">
                <label for="address">Select Address:</label>
                <select id="address" name="address.address" class="form-control">
                  <% if (user && user.addresses && user.addresses.length > 0) { %>
                    <% for (let i = 0; i < user.addresses.length; i++) { %>
                      <option value="<%= user.addresses[i].address %>" 
                        data-name="<%= user.addresses[i].name %>"
                        data-address="<%= user.addresses[i].address %>"
                        data-state="<%= user.addresses[i].state %>"
                        data-city="<%= user.addresses[i].city %>"
                        data-pincode="<%= user.addresses[i].pincode %>"
                        data-email="<%= user.email %>">
                        <%= user.addresses[i].address %>, <%= user.addresses[i].city %>, <%= user.addresses[i].state %>, <%= user.addresses[i].pincode %>
                      </option>
                    <% } %>
                  <% } else { %>
                    <option value="" disabled>No addresses available</option>
                  <% } %>
                </select>
              </div>
              


            </div>
            <div class="row">
              <% if (user && user.addresses) { %>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example1n">Full name</label>
                  <input type="text" id="form3Example1n" class="form-control form-control-lg" name="name" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example8">Address</label>
                  <input type="text" id="form3Example8" class="form-control form-control-lg" name="address" required />
                  <!-- Hidden inputs for product details -->
                  <% for (let i=0; i < cartData.products.length; i++) { %>
                    <input type="hidden" name="productId" value="<%= cartData.products[i].product._id %>">
                    <input type="hidden" name="proName" value="<%= cartData.products[i].product.name %>">
                    <input type="hidden" name="quantity" value="<%= cartData.products[i].quantity %>">
                    <input type="hidden" name="price" value="<%= cartData.products[i].product.price %>">
                    <% } %>
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example8">State</label>
                  <input type="text" id="form3Example8" class="form-control form-control-lg" name="state" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example9">City</label>
                  <input type="text" id="form3Example9" class="form-control form-control-lg" name="city" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example3">Pincode</label>
                  <input type="text" id="form3Example3" class="form-control form-control-lg" name="pincode" required />
                </div>
                <div class="form-outline mb-4">
                  <label class="form-label" for="form3Example2">Email</label>
                  <input type="text" id="form3Example2" class="form-control form-control-lg" name="email" required />
                </div>
                <% } else { %>
                  <p>User data not available</p>
                  <% } %>
            </div>
          </div>

          <div class="col-md-4 order-md-2 mb-4 background">

            <h4 class="d-flex justify-content-between align-items-center mb-3">
              <span class="">Your cart</span>
            </h4>

            <ul class="list-group mb-3">
              <% if (cartData && cartData.products && cartData.products.length> 0) { %>
                <% for (let i=0; i < cartData.products.length; i++) { %>
                  <li class="list-group-item d-flex justify-content-between lh-condensed">
                    <div>
                      <% if (cartData.products[i].product.image && cartData.products[i].product.image.length> 0) { %>
                        <!-- Display the first product image -->
                        <img src="/public/productImage/<%= cartData.products[i].product.image[0] %>" class="img-sm"
                          style="height: 50px;width: 50px;">
                        <% } %>
                          <h6 class="my-0">
                            <%= cartData.products[i].product.name %>
                          </h6>
                          <small class="text-muted">
                            <%= cartData.products[i].product.description %>
                          </small>
                    </div>
                    <span class="text-muted">Rs.<%= cartData.products[i].product.price %></span>
                  </li>
                  <% } %>
                    <% } else { %>
                      <li class="list-group-item d-flex justify-content-between">
                        <span>No products in the cart</span>
                      </li>
                      <% } %>
                        <li class="list-group-item d-flex justify-content-between">
                          <span>Total Price</span>
                          <strong>Rs.<%= cartData.totalPrice %></strong>
                        </li>
            </ul>
            <div>
              <hr class="mb-4">
              <h4 class="mb-3 ">Payment</h4>
              <div class="d-block my-3">
                <div class="form-outline mb-4">
                  <select name="payment" id="payment" class="form-control">
                    <option value="" class="form-label">Choose Your Payment Method</option>
                    <option value="COD" class="form-label">COD</option>
                    <option value="WALLET" class="form-label">WALLET</option>
                    <option value="UPI" class="form-label">UPI</option>
                  </select>
                </div>
              </div>
              <hr class="mb-4">
              <button class="btn btn-primary btn-lg btn-block" type="submit" onclick="">Continue to checkout</button>

            </div>
          </div>
        </div>

      </form>
    </div>
  </div>



  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
   




document.addEventListener('DOMContentLoaded', function () {

  


  var form = document.querySelector('.needs-validation');
  var addressSelect = document.getElementById('address');
  var fullNameInput = document.getElementById('form3Example1n');
  var submitButton = document.querySelector('button[type="submit"]');
  


  
  // Disable the button initially if no address is selected
  if (!addressSelect.value) {
    submitButton.disabled = true;
  }

  addressSelect.addEventListener('change', function () {
    if (addressSelect.value !== "") {
      var selectedAddress = addressSelect.options[addressSelect.selectedIndex];

      fullNameInput.value = selectedAddress.dataset.name;
      document.getElementById('form3Example8').value = selectedAddress.dataset.address;
      document.querySelector('[name="state"]').value = selectedAddress.dataset.state;
      document.querySelector('[name="city"]').value = selectedAddress.dataset.city;
      document.getElementById('form3Example3').value = selectedAddress.dataset.pincode;
      document.getElementById('form3Example2').value = selectedAddress.dataset.email;

      // Manually trigger change event after auto-filling the inputs
      fullNameInput.dispatchEvent(new Event('change'));
      document.getElementById('form3Example8').dispatchEvent(new Event('change'));
      document.querySelector('[name="state"]').dispatchEvent(new Event('change'));
      document.querySelector('[name="city"]').dispatchEvent(new Event('change'));
      document.getElementById('form3Example3').dispatchEvent(new Event('change'));
      document.getElementById('form3Example2').dispatchEvent(new Event('change'));

      // Enable submit button when a valid address is selected
      submitButton.disabled = false;

    } else {
      // Clear fields if no address is selected
      fullNameInput.value = '';
      document.getElementById('form3Example8').value = '';
      document.querySelector('[name="state"]').value = '';
      document.querySelector('[name="city"]').value = '';
      document.getElementById('form3Example3').value = '';
      document.getElementById('form3Example2').value = '';

      submitButton.disabled = true;
    }
  });

});









    async function placeOrder(event) {
      try {
        event.preventDefault();

        const form = event.target;
        const formData = new FormData(form);

        const formDataObject = {};
        formData.forEach((value, key) => {
          formDataObject[key] = value;
        });

        console.log(formDataObject);

        const response = await fetch('/place-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formDataObject),
        });

        console.log('Client Response:', response);

        if (!response.ok) {
          console.error('Fetch error:', response.status, response.statusText);

          if (response.status === 400) {
            handleNonJsonResponse(response);
          } else {
            handleNonJsonResponse('Unexpected error');
          }

          return;
        }

        if (response.redirected) {
          console.log('Redirect detected, navigating to:', response.url);
          window.location.href = response.url;
          return;
        }

        try {
          const result = await response.json();
          console.log('Parsed JSON Response:', result);

          if (result.errorMessages) {
            handleVerificationFailure(result.errorMessages);
            return;
          }

          if (result.response && result.response.method === 'UPI') {
            console.log('UPI payment detected');

            const orderDetails = {
              key: result.response.key_id,
              amount: result.response.amount,
              currency: 'INR',
              order_id: result.response.order.id,
              image: '',
              handler: async function (result) {
                const formDataClone = new FormData(form);
                console.log('formDataClone:', formDataClone);

                formDataClone.forEach((value, key) => {
                  console.log(`${key}: ${value}`);
                });

                const verifyResponse = await fetch('/verifyRazorPay', {
                  method: 'POST',
                  body: formDataClone,
                });

                if (verifyResponse.ok) {
                  const verifyResult = await verifyResponse.json();
                  window.location.href = '/order-placed';
                } else {
                  const verifyResult = await verifyResponse.json();
                  handleVerificationFailure(verifyResult.errorMessages);
                }
              },
            };

            console.log('Before Razorpay instantiation');
            const razorpay = new Razorpay(orderDetails);
            console.log('After Razorpay instantiation');

            razorpay.on('payment.failed', function (response) {
              alert(response.error.reason);
            });
            razorpay.open();
          } else {
            console.log('Fallback to order-placed');
            window.location.href = '/order-placed';
          }
        } catch (jsonError) {
          console.error('JSON parsing error:', jsonError);
          handleNonJsonResponse('Unexpected response from the server');
        }
      } catch (error) {
        console.error('Error:', error);
        handleNonJsonResponse('Unexpected error');
      }
    }

    function handleVerificationFailure(errorMessage) {
      const customAlertContainer = document.getElementById('customAlertContainer');
      const customAlertStrong = document.getElementById('customAlertStrong');

      if (customAlertContainer && customAlertStrong) {
        customAlertStrong.textContent = errorMessage;
        customAlertContainer.style.display = 'block';
        console.log('Failed to verify Razorpay payment');
      } else {
        console.error('Failed to set properties on null elements');
      }
    }

    function handleNonJsonResponse(response) {
      const customAlertContainer = document.getElementById('customAlertContainer');
      const customAlertStrong = document.getElementById('customAlertStrong');

      if (customAlertContainer && customAlertStrong) {
        if (response.status === 400) {
          customAlertStrong.textContent = 'Insufficient balance. Choose another option.';
        } else {
          customAlertStrong.textContent = 'Unexpected error';
        }

        customAlertContainer.style.display = 'block';
        console.log('Failed to place order (non-JSON response)');
      } else {
        console.error('Failed to set properties on null elements');
      }
    }
  </script>

  

  <%- include('../userLayouts/userFoot.ejs') %>



  //view_coupon.ejs


  <%- include('../adminLayouts/homehead.ejs') %>


  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

  <div class="modal fade" id="deleteCouponModal" tabindex="-1" aria-labelledby="deleteCouponModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteCouponModalLabel">Delete Coupon</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          Are you sure you want to delete this coupon?
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <a id="deleteCouponBtn" href="#" class="btn btn-danger">Delete</a>
        </div>
      </div>
    </div>
  </div>

  <h1 style="text-align: center; font-weight: bolder;">COUPONS</h1>


  <div style="margin: 20px;">
    <div class="table-responsive">
      <table class="table table-hover">
        <thead>
          <tr>
            <th scope="col">Coupon Code</th>
            <th scope="col">Discount</th>
            <th scope="col">Minimum Purchase</th>
            <th scope="col">Discount Type</th>
            <th scope="col">Expiry Date</th>
            <th scope="col"></th>
            <th scope="col"></th>
          </tr>
        </thead>
        <tbody>
          <% coupons.forEach(coupon=> { %>
            <tr>
              <td>
                <%= coupon.code %>
              </td>
              <td>
                <%= coupon.discount %>% discount
              </td>
              <td>
                <%= coupon.minimumPurchase %>
              </td>
              <td>
                <%= coupon.discountType %>
              </td>
              <td>
                <%= coupon. expiry %>
              </td>
              <td>
                <a href="/admin/edit-coupon?id=<%= coupon._id %>">
                  <img src="/public/photo/edit.png" width="25px" height="25px">
                </a>
              </td>
              <td>
                <!-- Add data-bs-toggle and data-bs-target attributes to open the modal -->
                <a href="#" data-bs-toggle="modal" data-bs-target="#deleteCouponModal"
                  data-coupon-id="<%= coupon._id %>">
                  <img src="/public/photo/delete.png" width="25px" height="25px">
                </a>
              </td>
            </tr>
            <% }); %>
        </tbody>
      </table>
    </div>
  </div>

<%- include('../adminLayouts/homefooter.ejs') %>

    <script>
      // JavaScript to handle modal confirmation and delete action
      document.addEventListener('DOMContentLoaded', function () {
        const deleteCouponBtn = document.getElementById('deleteCouponBtn');
        const deleteCouponModal = new bootstrap.Modal(document.getElementById('deleteCouponModal'));

        // Add click event listener to each delete button
        document.querySelectorAll('[data-bs-target="#deleteCouponModal"]').forEach(item => {
          item.addEventListener('click', (event) => {
            const couponId = event.currentTarget.getAttribute('data-coupon-id');

            // Update the 'Delete' button href with the actual delete URL
            deleteCouponBtn.href = `/admin//delete-coupon?id=${couponId}`;
          });
        });
      });
    </script>

    <script>

      function showToastr(message, type = 'success') {
        toastr.options = {
          closeButton: true,            // Show close button
          progressBar: true,            // Display a progress bar
          positionClass: 'toast-top-right', // Set the toast position
          showDuration: 300,            // Display duration in milliseconds
          hideDuration: 1000,           // Hide duration in milliseconds
          timeOut: 5000,                // Time to close the toast automatically
          extendedTimeOut: 1000,        // Time to close the toast after extended time
          showEasing: 'swing',          // Easing for the show animation
          hideEasing: 'linear',         // Easing for the hide animation
          showMethod: 'fadeIn',         // Show animation method
          hideMethod: 'fadeOut'         // Hide animation method
        }
        toastr[type](message);
      }
    </script>




//admin home.ejs

//admin home.ejs


<%- include('../adminLayouts/homehead.ejs') %>

  <style>
    .charts-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
      /* Adjust as needed */
    }

    .charts-card {
      width: 50%;
      /* Adjust as needed */
    }
    @media (min-width: 576px) {
      .charts-card {
        width: 48%;
      }
    }
  </style>


  <main class="content px-3 py-2">
    <div class="container-fluid">
      <div class="mb-3">
        <h4>Admin Dashboard</h4>
      </div>

      <div class="row">
        <div class="col-12 col-md-6 d-flex">
          <div class="card flex-fill border-0 illustration">
            <div class="card-body p-0 d-flex flex-fill">
              <div class="row g-0 w-100">
                <div class="col-6">
                  <div class="p-3 m-1">
                    <h4>Welcome Back, Admin</h4>
                    <p class="mb-0">Admin Dashboard</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="col-12 col-md-6 d-flex">
          <div class="card flex-fill border-0">
            <div class="card-body py-4">
              <div class="d-flex align-items-start">
                <div class="flex-grow-1">
                  <p class="text-primary">SALES ORDERS</p>
                  <span class="material-symbols-outlined text-green">add_shopping_cart</span>
                </div>
                <span class="text-primary font-weight-bold" style="font-weight: bolder;font-size: larger;">
                  <%= salesCount %>
                </span>
              </div>
            </div>
          </div>
        </div>

        <div class="mb-3 d-flex justify-content-end">
          <button class="btn btn-outline-secondary mr-2" onclick="fetchData('monthly')">Monthly</button>
          <button class="btn btn-outline-secondary ml-2" onclick="fetchData('yearly')">Yearly</button>
        </div>

        <div class="charts-row">
          <div class="charts-card">
            <p class="chart-title">Top 5 Products</p>
            <div id="bar-chart"></div>
          </div>

          <div class="charts-card">
            <p class="chart-title">Purchase and Sales Orders </p>
            <div id="area-chart"></div>
          </div>
        </div>

        <div class="charts-row">
          <div class="charts-card">
            <p class="chart-title">Delivery Status</p>
            <div id="pie-chart"></div>
          </div>

          <div class="charts-card">
            <p class="chart-title">Top 5 purchased Products</p>
            <div id="line-chart"></div>
          </div>
        </div>

      </div>
    </div>
  </main>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.44.0/apexcharts.min.js"
    integrity="sha512-9ktqS1nS/L6/PPv4S4FdD2+guYGmKF+5DzxRKYkS/fV5gR0tXoDaLqqQ6V93NlTj6ITsanjwVWZ3xe6YkObIQQ=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

  <script>

    async function fetchData(timeInterval) {

      // Inside the fetchData function, add the following code for the line chart
      const lineChartResponse = await fetch('/admin/linechart', { method: 'GET' });

      if (!lineChartResponse.ok) {
        throw new Error(`Error fetching line chart data. Status: ${lineChartResponse.status}`);
      }

      const lineChartData = await lineChartResponse.json();

      // Render the line chart using the fetched data
      var lineChartOptions = {
        series: [{
          name: 'Line Chart Series',
          data: lineChartData.data
        }],
        chart: {
          height: 350,
          type: 'line',
          toolbar: {
            show: false
          }
        },
        colors: ["#4f35a1"], // Customize color as needed
        dataLabels: {
          enabled: false
        },
        stroke: {
          curve: 'smooth'
        },
        xaxis: {
          categories: lineChartData.categories,
        },
        yaxis: {
          title: {
            text: 'Y-Axis Title'
          }
        }
      };

      var lineChart = new ApexCharts(document.querySelector("#line-chart"), lineChartOptions);
      lineChart.render();


      // Inside the fetchData function, add the following code for the pie chart
      const pieChartResponse = await fetch('/admin/piechart', { method: 'GET' });

      if (!pieChartResponse.ok) {
        throw new Error(`Error fetching pie chart data. Status: ${pieChartResponse.status}`);
      }

      const pieChartData = await pieChartResponse.json();

      // Render the pie chart using the fetched data
      var pieChartOptions = {
        series: pieChartData.series,
        labels: pieChartData.labels,
        chart: {
          type: 'donut', // You can change the chart type as needed
          height: 350,
          toolbar: {
            show: false
          }
        },
        colors: ['#ff8c00', '#36A2EB', '#FFCE56', '#cc3c43', '#367952'], // Customize colors as needed
        dataLabels: {
          enabled: false
        },
        legend: {
          show: true,
          position: 'bottom',
        }
      };

      var pieChart = new ApexCharts(document.querySelector("#pie-chart"), pieChartOptions);
      pieChart.render();


      console.log(timeInterval);

      let apiUrl1;
      let apiUrl2;
      /*if (timeInterval === 'daily') {
        apiUrl1 = `/admin/weeklyBarChart`;
        apiUrl2 = `/admin/yearlyAreaChart`;
      } else*/ if (timeInterval === 'weekly') {
        apiUrl1 = `/admin/weeklyBarChart`;
        apiUrl2 = `/admin/weeklyAreaChart`;
      } else if (timeInterval === 'monthly') {
        apiUrl1 = `/admin/monthlyBarChart`;
        apiUrl2 = `/admin/monthlyAreaChart`;
      } else if (timeInterval === 'yearly') {
        apiUrl1 = `/admin/yearlyBarChart`;
        apiUrl2 = `/admin/yearlyAreaChart`;
      }

      try {
        const response = await fetch(apiUrl1, {
          method: 'GET'
        });
        console.log(apiUrl2)
        const response1 = await fetch(apiUrl2, {
          method: 'GET'
        });



        // console.log(response)
        if (!response.ok) {
          throw new Error(`Error fetching data. Status: ${response.status}`);
        }
        else {
          const data = await response.json();
          console.log(data)
          var barChartOptions = {
            series: [{
              data: data.top5AverageQuantities
            }],
            chart: {
              type: 'bar',
              height: 350,
              toolbar: {
                show: false
              }
            },
            colors: [
              "#246dec",
              "#cc3c43",
              "#367952",
              "#f5b74f",
              "#4f35a1"
            ],
            plotOptions: {
              bar: {
                distributed: true,
                borderRadius: 4,
                horizontal: false,
                columnWidth: '40%'
              }
            },
            dataLabels: {
              enabled: false
            },
            legend: {
              show: false
            },
            xaxis: {
              categories: data.top5ProductNames,
            },
            yaxis: {
              title: {
                text: "Count"
              }
            }
          };

          var barChart = new ApexCharts(document.querySelector("#bar-chart"), barChartOptions);
          barChart.render();
        }

        if (!response1.ok) {
          throw new Error(`Error fetching data. Status: ${response1.status}`);
        } else {
          const data1 = await response1.json();
          console.log(data1)
          var areaChartOptions = {
            series: [{
              name: 'Purchase Orders',

              data: data1.purchase
            }, {
              name: 'Sales Orders',

              data: data1.sales
            }],
            chart: {
              height: 350,
              type: 'area',
              toolbar: {
                show: false
              }
            },
            colors: ["#4f35a1", "#246dec"],
            dataLabels: {
              enabled: false
            },
            stroke: {
              curve: 'smooth'
            },

            labels: data1.months,
            markers: {
              size: 0
            },
            yaxis: [
              {
                title: {
                  text: 'Purchase Orders',
                },
              },
              {
                opposite: true,
                title: {
                  text: 'Sales Orders',
                },
              },
            ],
            tooltip: {
              shared: true,
              intersect: false,
              y: {
                formatter: function (y) {
                  if (typeof y !== "undefined") {
                    return y.toFixed(0) + " points";
                  }
                  return y;
                }
              }
            }
          };

          var areaChart = new ApexCharts(document.querySelector("#area-chart"), areaChartOptions);
          areaChart.render();

        }



      } catch (error) {
        console.error('Error fetching data:', error.message);
      }
    };

    document.addEventListener("DOMContentLoaded", function () {

      fetchData('yearly');
    });


  </script>


  <%- include('../adminLayouts/homefooter.ejs') %>


  .................................................................



  


<%- include('../adminLayouts/homehead.ejs') %>

<style>
  .charts-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
  }

  .charts-card {
    width: 50%;
  }

  @media (min-width: 576px) {
    .charts-card {
      width: 48%;
    }
  }
</style>

<main class="content px-3 py-2">
  <div class="container-fluid">
    <div class="mb-3">
      <h4>Admin Dashboard</h4>
    </div>

    <div class="row">
      <div class="col-12 col-md-6 d-flex">
        <div class="card flex-fill border-0 illustration">
          <div class="card-body p-0 d-flex flex-fill">
            <div class="row g-0 w-100">
              <div class="col-6">
                <div class="p-3 m-1">
                  <h4>Welcome Back, Admin</h4>
                  <p class="mb-0">Admin Dashboard</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="col-12 col-md-6 d-flex">
        <div class="card flex-fill border-0">
          <div class="card-body py-4">
            <div class="d-flex align-items-start">
              <div class="flex-grow-1">
                <p class="text-primary">SALES ORDERS</p>
                <span class="material-symbols-outlined text-green">add_shopping_cart</span>
              </div>
              <span class="text-primary font-weight-bold" style="font-weight: bolder; font-size: larger;">
                <%= salesCount %>
              </span>
            </div>
          </div>
        </div>
      </div>

      <div class="mb-3 d-flex justify-content-end">
        <button class="btn btn-outline-secondary mr-2" onclick="fetchData('monthly')">Monthly</button>
        <button class="btn btn-outline-secondary ml-2" onclick="fetchData('yearly')">Yearly</button>
      </div>

      <div class="charts-row">
        <div class="charts-card">
          <!-- <p class="chart-title">Top 5 Products</p> -->

          <p class="chart-title">Best selling product</p>



          <div id="bar-chart"></div>
        </div>

        <div class="charts-card">
          <p class="chart-title">Purchase and Sales Orders</p>
          <div id="area-chart"></div>
        </div>
      </div>

      <div class="charts-row">
        <div class="charts-card">
          <p class="chart-title">Delivery Status</p>
          <div id="pie-chart"></div>
        </div>

        <div class="charts-card">
          <!-- <p class="chart-title">Top 5 Purchased Products</p> -->

          <p class="chart-title">Best selling categories</p>
          <div id="line-chart"></div>
        </div>
      </div>

    </div>
  </div>
</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.44.0/apexcharts.min.js"
  integrity="sha512-9ktqS1nS/L6/PPv4S4FdD2+guYGmKF+5DzxRKYkS/fV5gR0tXoDaLqqQ6V93NlTj6ITsanjwVWZ3xe6YkObIQQ=="
  crossorigin="anonymous" referrerpolicy="no-referrer"></script>


  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<script>


  async function fetchData(timeInterval) {
    let apiUrlBar, apiUrlArea;

    if (timeInterval === 'monthly') {
      apiUrlBar = '/admin/monthlyBarChart';
      apiUrlArea = '/admin/monthlyAreaChart';
    } else if (timeInterval === 'yearly') {
      apiUrlBar = '/admin/yearlyBarChart';
      apiUrlArea = '/admin/yearlyAreaChart';
    }

    try {
      // Bar chart for top 5 products
      const barChartResponse = await fetch(apiUrlBar);
      if (!barChartResponse.ok) throw new Error('Error fetching bar chart data');
      const barData = await barChartResponse.json();
      renderBarChart(barData.top5ProductNames, barData.top5AverageQuantities);

      // Area chart for purchase and sales orders
      const areaChartResponse = await fetch(apiUrlArea);
      if (!areaChartResponse.ok) throw new Error('Error fetching area chart data');
      const areaData = await areaChartResponse.json();
      renderAreaChart(areaData.months, areaData.purchase, areaData.sales);

      // Fetch and render pie chart
      await fetchAndRenderPieChart();

      // Fetch and render line chart
      await fetchAndRenderLineChart();

    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }

  function renderBarChart(categories, seriesData) {
    var barChartOptions = {
      series: [{ data: seriesData }],
      chart: { type: 'bar', height: 350 },
      colors: ["#246dec", "#cc3c43", "#367952", "#f5b74f", "#4f35a1"],
      plotOptions: {
        bar: {
          distributed: true,
          borderRadius: 4,
          horizontal: false,
          columnWidth: '40%'
        }
      },
      xaxis: { categories },
      yaxis: { title: { text: "Count" } },
      dataLabels: { enabled: false },
      legend: { show: false }
    };
    new ApexCharts(document.querySelector("#bar-chart"), barChartOptions).render();
  }

  function renderAreaChart(labels, purchaseData, salesData) {
    var areaChartOptions = {
      series: [{ name: 'Purchase Orders', data: purchaseData }, { name: 'Sales Orders', data: salesData }],
      chart: { height: 350, type: 'area' },
      colors: ["#4f35a1", "#246dec"],
      stroke: { curve: 'smooth' },
      xaxis: { categories: labels },
      yaxis: [
        { title: { text: 'Purchase Orders' } },
        { opposite: true, title: { text: 'Sales Orders' } }
      ]
    };
    new ApexCharts(document.querySelector("#area-chart"), areaChartOptions).render();
  }

  async function fetchAndRenderPieChart() {
    const response = await fetch('/admin/piechart');
    if (!response.ok) throw new Error('Error fetching pie chart data');
    const pieData = await response.json();
    var pieChartOptions = {
      series: pieData.series,
      labels: pieData.labels,
      chart: { type: 'donut', height: 350 },
      colors: ['#ff8c00', '#36A2EB', '#FFCE56', '#cc3c43', '#367952'],
      legend: { position: 'bottom' }
    };
    new ApexCharts(document.querySelector("#pie-chart"), pieChartOptions).render();
  }

  async function fetchAndRenderLineChart() {
    const response = await fetch('/admin/linechart');
    if (!response.ok) throw new Error('Error fetching line chart data');
    const lineData = await response.json();
    var lineChartOptions = {
      series: [{ name: 'Purchased Products', data: lineData.data }],
      chart: { type: 'line', height: 350 },
      stroke: { curve: 'smooth' },
      xaxis: { categories: lineData.categories },
      yaxis: { title: { text: 'Products Sold' } }
    };
    new ApexCharts(document.querySelector("#line-chart"), lineChartOptions).render();
  }

  document.addEventListener("DOMContentLoaded", function () {
    fetchData('yearly');
  });
</script>

<%- include('../adminLayouts/homefooter.ejs') %>
............................................................................................

const Order = require('../model/orderModel');


const monthlyBarChart = async (req, res) => {
  try {
  //   const today = new Date();
  //   const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
  //   const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);

  //   const aggregationPipeline = [
  //     {
  //       $match: {
  //         orderPlacedAt: { $gte: firstDayOfMonth, $lt: lastDayOfMonth },
  //       },
  //     },
  //     {
  //       $unwind: "$products",
  //     },
  //     {
  //       $lookup: {
  //         from: "products", // The name of the Product collection
  //         localField: "products.product",
  //         foreignField: "_id",
  //         as: "productData",
  //       },
  //     },
  //     {
  //       $unwind: "$productData",
  //     },
  //     {
  //       $group: {
  //         _id: "$productData._id",
  //         name: { $first: "$productData.name" },
  //         totalQuantity: { $sum: "$products.quantity" },
  //         count: { $sum: 1 },
  //       },
  //     },
  //     {
  //       $project: {
  //         _id: 0,
  //         name: 1,
  //         averageQuantity: { $divide: ["$totalQuantity", "$count"] },
  //       },
  //     },
  //     {
  //       $sort: { averageQuantity: -1 },
  //     },
  //     {
  //       //$limit: 5,
  //       $limit: 10,
  //     },
  //   ];

  //   const top5Products = await Order.aggregate(aggregationPipeline);

  //   const top5AverageQuantities = top5Products.map((product) => parseFloat(product.averageQuantity.toFixed(2)));

  //   const top5ProductNames = top5Products.map((product) => product.name);

  //   console.log("Top 5 Average Quantities:", top5AverageQuantities);
  //   console.log("Corresponding Product Names:", top5ProductNames);

  //   const response = {
  //     top5AverageQuantities,
  //     top5ProductNames,
  //   };

  //   res.status(200).json(response);

  // } catch (err) {
  //   console.error(err.message);
  //   res.status(500).json({ error: "Internal Server Error" });
  // }

    
      const { year, month } = req.query; // Fetch year and month from query parameters
      const today = new Date();
      const selectedYear = year ? parseInt(year) : today.getFullYear();
      const selectedMonth = month ? parseInt(month) - 1 : today.getMonth();
  
      // Calculate first and last day of the selected month
      const firstDay = new Date(selectedYear, selectedMonth, 1);
      const lastDay = new Date(selectedYear, selectedMonth + 1, 0);
  
      const aggregationPipeline = [
        {
          $match: {
            orderPlacedAt: { $gte: firstDay, $lt: lastDay },
          },
        },
        {
          $unwind: "$products",
        },
        {
          $lookup: {
            from: "products",
            localField: "products.product",
            foreignField: "_id",
            as: "productData",
          },
        },
        {
          $unwind: "$productData",
        },
        {
          $group: {
            _id: "$productData._id",
            name: { $first: "$productData.name" },
            totalQuantity: { $sum: "$products.quantity" },
          },
        },
        {
          $sort: { totalQuantity: -1 },
        },
        {
          $limit: 10, // Top 10 products
        },
      ];
  
      const topProducts = await Order.aggregate(aggregationPipeline);
  
      const productNames = topProducts.map((product) => product.name);
      const quantities = topProducts.map((product) => product.totalQuantity);
  
      res.status(200).json({
        productNames,
        quantities,
      });
    } catch (err) {
      console.error(err.message);
      res.status(500).json({ error: "Internal Server Error" });
    }
  };
  

  


const yearlyBarChart = async (req, res) => {
  try {
    const today = new Date();
    const firstDayOfYear = new Date(today.getFullYear(), 0, 1);
    const lastDayOfYear = new Date(today.getFullYear() + 1, 0, 1);

    const aggregationPipeline = [
      {
        $match: {
          orderPlacedAt: { $gte: firstDayOfYear, $lt: lastDayOfYear },
        },
      },
      {
        $unwind: "$products",
      },
      {
        $lookup: {
          from: "products", // The name of the Product collection
          localField: "products.product",
          foreignField: "_id",
          as: "productData",
        },
      },
      {
        $unwind: "$productData",
      },
      {
        $group: {
          _id: "$productData._id",
          name: { $first: "$productData.name" },
          totalQuantity: { $sum: "$products.quantity" },
          count: { $sum: 1 },
        },
      },
      {
        $project: {
          _id: 0,
          name: 1,
          averageQuantity: { $divide: ["$totalQuantity", "$count"] },
        },
      },
      {
        $sort: { averageQuantity: -1 },
      },
      {
       // $limit: 5,
        $limit: 10,
      },
    ];

    const top5Products = await Order.aggregate(aggregationPipeline);

    const top5AverageQuantities = top5Products.map((product) => parseFloat(product.averageQuantity.toFixed(2)));
    const top5ProductNames = top5Products.map((product) => product.name);

    

    const response = {
      top5AverageQuantities,
      top5ProductNames,
    };

    res.status(200).json(response);
  } catch (err) {
    console.error(err.message);
    res.status(500).json({ error: "Internal Server Error" });
  }
};


const monthlyAreaChart = async (req, res) => {
    try {
  
      const getMonthlyCounts = async () => {
        const today = new Date();
        const year = today.getFullYear();
        const monthlySalesCounts = [];
        const monthlyPurchaseCounts = [];
        const monthLabels = [];
  
        const targetYear = 2023; // Change this to the desired year
  
        const startOfYear = new Date(targetYear, 0, 1);
        const endOfYear = new Date(targetYear + 1, 0, 0);
  
        const minMonth = await Order.find({ orderPlacedAt: { $gte: startOfYear, $lt: endOfYear } }).sort({ orderPlacedAt: 1 }).limit(1).then(orders => orders[0]?.orderPlacedAt.getMonth());
        const maxMonth = await Order.find({ orderPlacedAt: { $gte: startOfYear, $lt: endOfYear } }).sort({ orderPlacedAt: -1 }).limit(1).then(orders => orders[0]?.orderPlacedAt.getMonth());
  
        console.log(minMonth);
        console.log(maxMonth);
  
  
  
        console.log(minMonth);
        console.log(maxMonth);
        if (minMonth === undefined || maxMonth === undefined) {
          // No data available, handle accordingly
          return {
            monthlyPurchaseCounts,
            monthlySalesCounts,
            monthLabels
          };
        }
  
        for (let month = minMonth; month <= maxMonth; month++) {
          const firstDayOfMonth = new Date(year, month, 1);
          const lastDayOfMonth = new Date(year, month + 1, 0);
  
          const purchaseCount = await Order.find({
            orderPlacedAt: { $gte: firstDayOfMonth, $lt: lastDayOfMonth }
          }).count();
  
          const salesCount = await Order.find({
            orderPlacedAt: { $gte: firstDayOfMonth, $lt: lastDayOfMonth },
            status: 'Delivered'
          }).count();
  
          monthlyPurchaseCounts.push(purchaseCount);
          monthlySalesCounts.push(salesCount);
          monthLabels.push(firstDayOfMonth.toLocaleString('en-US', { month: 'long' }));
        }
  
        return {
          monthlyPurchaseCounts,
          monthlySalesCounts,
          monthLabels
        };
      };
  
      // Example usage
      const result = await getMonthlyCounts();
      console.log("Monthly Purchase Counts:", result.monthlyPurchaseCounts);
      console.log("Monthly Sales Counts:", result.monthlySalesCounts);
      console.log("Month Labels:", result.monthLabels);
  
      const response = {
        purchase: result.monthlyPurchaseCounts,
        sales: result.monthlySalesCounts,
        months: result.monthLabels
      }
      res.status(200).json(response);
  
    } catch (err) {
      console.log(err.message);
    }
  }
  
  const yearlyAreaChart = async (req, res) => {
    try {
      const getYearlyCounts = async () => {
        const today = new Date();
        const currentYear = today.getFullYear();
        const startYear = 2019;
        const yearlySalesCounts = [];
        const yearlyPurchaseCounts = [];
        const yearLabels = [];
  
        for (let year = startYear; year <= currentYear; year++) {
          const firstDayOfYear = new Date(year, 0, 1)
          const lastDayOfYear = new Date(year + 1, 0, 0)
  
          const purchaseCount = await Order.find({
            orderPlacedAt: { $gte: firstDayOfYear, $lt: lastDayOfYear }
          }).count();
  
          const salesCount = await Order.find({
            orderPlacedAt: { $gte: firstDayOfYear, $lt: lastDayOfYear },
            status: 'Delivered'
          }).count();
  
          yearlyPurchaseCounts.push(purchaseCount);
          yearlySalesCounts.push(salesCount);
          yearLabels.push(year.toString());
        }
  
        return {
          yearlyPurchaseCounts,
          yearlySalesCounts,
          yearLabels
        };
      };
  
      // Example usage
      const result = await getYearlyCounts();
      console.log("Yearly Purchase Counts:", result.yearlyPurchaseCounts);
      console.log("Yearly Sales Counts:", result.yearlySalesCounts);
      console.log("Year Labels:", result.yearLabels);
  
      const response = {
        purchase: result.yearlyPurchaseCounts,
        sales: result.yearlySalesCounts,
        months: result.yearLabels
      };
      res.status(200).json(response);
  
    } catch (err) {
      console.log(err.message);
      res.status(500).send('Internal Server Error');
    }
  };
  
  const piechart = async (req, res) => {
    try {
      // Fetch data from the database or calculate as needed
      const pieChartData = await Order.aggregate([
        {
          $group: {
            _id: '$status',
            count: { $sum: 1 },
          },
        },
      ]);
  
      const labels = pieChartData.map(data => data._id);
      const series = pieChartData.map(data => data.count);
  
      res.json({ labels, series });
    } catch (error) {
      console.error('Error fetching pie chart data:', error.message);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  };
  
  const linechart = async (req,res)=>{
    try {
      const categoryId = req.query.categoryId;
    
      const productFilter = categoryId ? { category_id: categoryId } : {};
      
      const orders = await Order.find().populate({
        path: 'products.product',
        match: productFilter,
      });
    
      const lineChartData = {
        categories: [],
        data: [],
      };
    
      orders.forEach((order) => {
        order.products.forEach((productOrder) => {
          const product = productOrder.product;
    
          // Check if product is not null or undefined
          if (product) {
            const quantity = productOrder.quantity;
    
            if (!categoryId || (product.category_id && product.category_id.toString() === categoryId)) {
              if (!lineChartData.categories.includes(product.name)) {
                lineChartData.categories.push(product.name);
              }
    
              const dataIndex = lineChartData.categories.indexOf(product.name);
              if (lineChartData.data[dataIndex]) {
                lineChartData.data[dataIndex] += quantity;
              } else {
                lineChartData.data[dataIndex] = quantity;
              }
            }
          }
        });
      });
    
      res.json(lineChartData);
    } catch (error) {
      console.error('Error fetching line chart data:', error.message);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
  
  module.exports = {
    monthlyBarChart,
    yearlyBarChart,
    monthlyAreaChart,
    yearlyAreaChart,
    piechart,
    linechart
  };
